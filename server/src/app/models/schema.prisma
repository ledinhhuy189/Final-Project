// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id
  email       String    @unique
  name        String?
  photoURL    String?
  phoneNumber String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  isDeleted   DateTime?
  members     Member[]
  messages    Message[]
  foods       Food[]
  orders      Order[]
  cart        Cart?
}

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  messages  Message[]
}

model Member {
  id             Int           @id @default(autoincrement())
  conversationId Int?
  userId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
}

model Message {
  id             Int           @id @default(autoincrement())
  conversationId Int?
  userId         String?
  content        String?
  type           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
}

model Food {
  id          Int         @id @default(autoincrement())
  slug        String      @unique
  name        String
  description String?
  price       Float
  photoURL    String?
  stock       Int         @default(1)
  categoryId  Int?
  userId      String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isDeleted   DateTime?
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  foods       Food[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int?
  foodId    Int?
  quantity  Int      @default(1)
  cart      Cart?    @relation(fields: [cartId], references: [id])
  food      Food?    @relation(fields: [foodId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int          @id @default(autoincrement())
  totalPrice    Float
  userId        String?
  orderStatusId Int?
  orderItems    OrderItem[]
  user          User?        @relation(fields: [userId], references: [id])
  orderStatus   OrderStatus? @relation(fields: [orderStatusId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  foodId    Int?
  orderId   Int?
  quantity  Int      @default(1)
  food      Food?    @relation(fields: [foodId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  name      String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
